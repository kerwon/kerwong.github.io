<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nutslog</title>
  <subtitle>Intergation, I believe that practice, not dogma</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wenchao.wang/"/>
  <updated>2016-12-14T14:38:56.000Z</updated>
  <id>http://wenchao.wang/</id>
  
  <author>
    <name>Alex Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown 语法简单小结</title>
    <link href="http://wenchao.wang/2016/12/Markdown-%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://wenchao.wang/2016/12/Markdown-语法简单小结/</id>
    <published>2016-12-12T02:12:12.000Z</published>
    <updated>2016-12-14T14:38:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最终，我的博客还是回归到了起点。<br>博客断断续续几年，尽是折腾界面美化和各种网站框架或者建站工具，最终，失去了其核心价值，即内容和思想的沉淀。这更使得我的博客流于表面，对于自己的成长，也没有起到太多正面的作用。</p>
<p>反思后，决心回归最简单的格式外观，将重点集中于高质量内容的沉淀上。<br> 这也是为什么又回到了 Markdown 的怀抱。</p>
<p>至于编辑器，我用过了众多纯编辑器，众多 Web 版的富文本编辑器，以及许许多多Markdown 编辑器后，决定使用最的 Vim。同时，也推荐一款 Markdown 编辑器<code>Typora</code>。这款软件足够轻量级，同时功能做到了尽可能的简单。至于 Web 编辑器，我使用<code>简书</code>。</p>
<h1 id="Markdown-概述"><a href="#Markdown-概述" class="headerlink" title="Markdown 概述"></a>Markdown 概述</h1><blockquote>
<p>Markdown 是一种轻量级的 “标记语言”，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。<br>——Wikipedia</p>
</blockquote>
<p>Markdown 拥有这众多的优点</p>
<ul>
<li>纯文本编辑</li>
<li>学习成本低</li>
<li>广泛的软件支持</li>
<li>在码农界有深厚的基础</li>
</ul>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*这是斜体*</code></td>
<td><em>这是斜体</em></td>
</tr>
<tr>
<td><code>_这是斜体_</code></td>
<td><em>这是斜体</em></td>
</tr>
<tr>
<td><code>**这是粗体**</code></td>
<td><strong>这是粗体</strong></td>
</tr>
<tr>
<td><code>__这是粗体__</code></td>
<td><strong>这是粗体</strong></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<p>注意</p>
<ol>
<li>最后一个 <code>#</code> 字符与标题<strong>中间要留有一个空格</strong></li>
<li>标题共提供 <strong>6</strong> 级</li>
<li>一般行文中，标题应置于行首。若置于表格中，可能无法正确解析 </li>
</ol>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>Markdown 中引用通过符号 ‘&gt;’ 来实现。’&gt;’ 符号后的空格，可有可无。<br>在引用的区块内，允许换行存在，换行并不会终止引用的区块。如果要结束引用，需要一行空白行，来结束引用的区块。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; 这是一句引用</div><div class="line">&gt; 这句仍然在引用区块内</div><div class="line">&gt;&gt; 这是一句嵌套引用</div><div class="line">&gt;&gt; 这句仍然在嵌套引用区块内</div><div class="line">&gt;</div><div class="line">&gt; 另起一行的引用。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的(&apos;&gt;&apos;)可以有可以没有。</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<blockquote>
<p>这是一句引用<br>这句仍然在引用区块内</p>
<blockquote>
<p>这是一句嵌套引用<br>这句仍然在嵌套引用区块内</p>
</blockquote>
<p>另起一行的引用。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的<strong>(‘&gt;’)</strong>可以有可以没有。</p>
</blockquote>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字不能省略但可无序，点号之后的空格不能少。<br>虽然下面代码的序号是 1，2，4，但是在显示时，仍然为自然数序列，并不是完成与编号一致。<br>同样的，在列表的最后需要留有一行空行，以表达列表的结束，不然将作为一个无编号的列表存在。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 列表 A</div><div class="line">2. 列表 B</div><div class="line">4. 列表 C</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<ol>
<li>列表 A</li>
<li>列表 B</li>
<li>列表 C</li>
</ol>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>符号之后的空格不能少，<code>-+*</code>效果一样，但不能混合使用</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- 列表 A1</div><div class="line">- 列表 B1</div><div class="line"></div><div class="line">+ 列表 A2</div><div class="line">+ 列表 B2</div><div class="line"></div><div class="line">* 列表 A3</div><div class="line">* 列表 B3</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<ul>
<li>列表 A1</li>
<li>列表 B1</li>
</ul>
<ul>
<li>列表 A2</li>
<li>列表 B2</li>
</ul>
<ul>
<li>列表 A3</li>
<li>列表 B3</li>
</ul>
<h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>有序与无序，以及有序和无序列表本身都是可以自由的嵌套的。<br>Markdown 中的列表嵌套，通过<strong>在符号前增加空格</strong>来表示。同一级别下，前面的空格数目应该保持一致。每递进一级，我习惯上使用 2 个空格缩进来表示。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- 一级列表 A</div><div class="line">- 一级列表 B</div><div class="line">  - 二级列表 A</div><div class="line">  * 二级列表 B</div><div class="line">    + 三级列表 A</div><div class="line">- 一级列表 C</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<ul>
<li>一级列表 A</li>
<li>一级列表 B<ul>
<li>二级列表 A</li>
</ul>
<ul>
<li>二级列表 B<ul>
<li>三级列表 A</li>
</ul>
</li>
</ul>
</li>
<li>一级列表 C</li>
</ul>
<blockquote>
<p>注意，有序列表的嵌套，也是通过预留空格实现</p>
</blockquote>
<ol>
<li>有序一级列表 A</li>
<li>有序一级列表 B<ol>
<li>有序二级列表 A</li>
<li>有序二级列表 B<ul>
<li>无序三级列表 A</li>
<li>无序三级列表 B</li>
</ul>
</li>
</ol>
</li>
<li>有序一级列表 C</li>
</ol>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或更多<code>-_*</code>，必须单独一行，可含空格。<br>例如以下形式，都可以表示为分割线。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- -    -</div><div class="line">___</div><div class="line">_   __</div><div class="line">***</div><div class="line">*  **</div><div class="line">  *  *  *</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="进阶语法"><a href="#进阶语法" class="headerlink" title="进阶语法"></a>进阶语法</h1><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>图片与链接，在 Markdown 语法中表达类似，都是 <code>[链接文字](链接地址)</code> 这样的形式。</p>
<h3 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h3><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Wikipedia Markdown 条目](https://zh.wikipedia.org/wiki/Markdown)</div><div class="line">[Wikipedia Markdown 条目](https://zh.wikipedia.org/wiki/Markdown &quot;Markdown 条目&quot;)</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Wikipedia Markdown 条目</a><br><a href="https://zh.wikipedia.org/wiki/Markdown" title="Markdown 条目" target="_blank" rel="external">Wikipedia Markdown 条目</a></p>
<h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>图片需要在 <code>[]</code> 前增加一个 <code>!</code> 以使得图片在网页上直接显示，而不仅仅是个链接形式。</p>
<p>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![维基百科 Logo](https://zh.wikipedia.org/static/images/project-logos/zhwiki.png)</div><div class="line">![维基百科 Logo](https://zh.wikipedia.org/static/images/project-logos/zhwiki.png &quot;维基 Logo&quot;)</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="https://zh.wikipedia.org/static/images/project-logos/zhwiki.png" alt="维基百科 Logo"><br><img src="https://zh.wikipedia.org/static/images/project-logos/zhwiki.png" alt="维基百科 Logo" title="维基 Logo"></p>
<p>上面分别有两个超链接和两张图片，两个超链接的区别在于一个增加了说明注释，而另一个没有，图片同理。</p>
<h3 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h3><p>索引链接，本质上与前两种链接一致，只是索引链接将 <code>[链接文字](链接地址)</code> 分离为<code>[链接文字][索引]</code>, <code>[索引]:链接地址</code> 的形式。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Wikipedia Markdown 条目][1]</div><div class="line">[1]:https://zh.wikipedia.org/wiki/Markdown</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Wikipedia Markdown 条目</a></p>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>对于表格的支持，要根据具体的 Markdown 解释器来判定。在 hexo 中，支持以下 Markdown 形式的表格。<br>需要注意以下几点：</p>
<ol>
<li>表格第一行为标题，样式会被特殊处理</li>
<li><code>|</code> 前后要留有空格</li>
<li>只要是三个 <code>-</code> 字符表示分隔线</li>
<li>通过 <code>:</code> 来区分，左对齐、居中、右对齐</li>
</ol>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">| 1 | 2 | 3 |</div><div class="line">| --- |:---:| ---:|</div><div class="line">| aaa | bbbbbb | c |</div><div class="line">| aaaaaa | b | ccc |</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>1</th>
<th style="text-align:center">2</th>
<th style="text-align:right">3</th>
</tr>
</thead>
<tbody>
<tr>
<td>aaa</td>
<td style="text-align:center">bbbbbb</td>
<td style="text-align:right">c</td>
</tr>
<tr>
<td>aaaaaa</td>
<td style="text-align:center">b</td>
<td style="text-align:right">ccc</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>如果要标记一小段行内代码，可以用反引号 <strong>`</strong> 把它包起来</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一段行内代码，`System.out.println(&quot;article id: &quot; + articleId);` 摘自 Redis 工程。</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p>这是一段行内代码，<code>System.out.println(&quot;article id: &quot; + articleId);</code> 摘自 Redis 工程。</p>
<h3 id="区块代码"><a href="#区块代码" class="headerlink" title="区块代码"></a>区块代码</h3><p>如果要成块的引用代码，有两种方法，一种是用制表符缩进，另一种，则是用三个反引号 <strong>```</strong>，将代码块包起来。<br>在三个反引号后，加上语言说明，例如 <strong>```java</strong> 这样，便指定了之后的代码采用 java 的高亮。</p>
<p>效果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">genRandPost</span><span class="params">(<span class="keyword">int</span> bound)</span> </span>&#123;</div><div class="line">	Random rand = <span class="keyword">new</span> Random();</div><div class="line">	<span class="keyword">int</span> cnt = rand.nextInt(bound);				</div><div class="line">	</div><div class="line">	Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">							</div><div class="line">	<span class="keyword">long</span> articleId;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</div><div class="line">		articleId = jedis.incr(<span class="string">"article:"</span>);</div><div class="line">		map.put(<span class="string">"author"</span>, <span class="string">"author"</span> + i);</div><div class="line">		map.put(<span class="string">"article"</span>, <span class="string">"This is article "</span> + i);</div><div class="line">		jedis.hmset(<span class="string">"article:"</span> + articleId, map);</div><div class="line">		map.clear();</div><div class="line">	&#125;</div><div class="line">	System.out.println(<span class="string">"Insert "</span> + cnt + <span class="string">" posts."</span>);</div><div class="line">											</div><div class="line">	<span class="keyword">return</span> cnt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>大神提供了 hexo 下自动部署 MathJax 插件。安装好插件后，遍可以使用 \(LaTex\) 来显示数学公式了。<br>在行内输入公式，需要在公式前后加上两个反斜杠 ‘\’ 以及一个括号，前后两个括号要成对。<br>而独立成行的公式，则使用两个美元符 ‘$’。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">在行内插入公式 \\(x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;\\) 是这样的。</div><div class="line"></div><div class="line">$$x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$</div><div class="line"></div><div class="line">$$</div><div class="line">\begin&#123;eqnarray&#125;</div><div class="line">\nabla\cdot\vec&#123;E&#125; &amp;=&amp; \frac&#123;\rho&#125;&#123;\epsilon_0&#125; \\</div><div class="line">\nabla\cdot\vec&#123;B&#125; &amp;=&amp; 0 \\</div><div class="line">\nabla\times\vec&#123;E&#125; &amp;=&amp; -\frac&#123;\partial B&#125;&#123;\partial t&#125; \\</div><div class="line">\nabla\times\vec&#123;B&#125; &amp;=&amp; \mu_0\left(\vec&#123;J&#125;+\epsilon_0\frac&#123;\partial E&#125;&#123;\partial t&#125; \right)</div><div class="line">\end&#123;eqnarray&#125;</div><div class="line">$$</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p>在行内插入公式 \(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\) 是这样的。</p>
<p>$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$</p>
<p>$$<br>\begin{eqnarray}<br>\nabla\cdot\vec{E} &amp;=&amp; \frac{\rho}{\epsilon_0} \<br>\nabla\cdot\vec{B} &amp;=&amp; 0 \<br>\nabla\times\vec{E} &amp;=&amp; -\frac{\partial B}{\partial t} \<br>\nabla\times\vec{B} &amp;=&amp; \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)<br>\end{eqnarray}<br>$$</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Wikipedia Markdown 条目，<a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Markdown</a><br>[2] 不如的博客，<a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="external">http://ibruce.info/2013/11/26/markdown/</a><br>[3] Markdown 语法说明 (简体中文版)，<a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="external">http://wowubuntu.com/markdown/index.html</a><br>[4] Markdown：让书写更美好，<a href="http://www.jianshu.com/p/17fdcf17bbb4" target="_blank" rel="external">http://www.jianshu.com/p/17fdcf17bbb4</a><br>[5] Markdown中插入数学公式的方法, <a href="http://blog.csdn.net/xiahouzuoxin/article/details/26478179" target="_blank" rel="external">http://blog.csdn.net/xiahouzuoxin/article/details/26478179</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;最终，我的博客还是回归到了起点。&lt;br&gt;博客断断续续几年，尽是折腾界面美化和各种网站框架或者建站工具，最终，失去了其核心价值
    
    </summary>
    
    
      <category term="Markdown" scheme="http://wenchao.wang/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Python logging日志模块使用小结</title>
    <link href="http://wenchao.wang/2016/10/Python-logging%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>http://wenchao.wang/2016/10/Python-logging日志模块使用小结/</id>
    <published>2016-10-18T07:28:21.000Z</published>
    <updated>2016-10-18T07:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在运行程序时，为了监控程序的行为需要对程序行为记录日志。</p>
<p>在Python 下，就有这样一个专门用来做日志记录的类库，logging</p>
<h2 id="简单的将日志打印到屏幕"><a href="#简单的将日志打印到屏幕" class="headerlink" title="简单的将日志打印到屏幕"></a>简单的将日志打印到屏幕</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># -- modules --</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="comment"># -- start --</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 默认情况下，logging将日志打印到屏幕，日志级别为WARNING</span></div><div class="line"></div><div class="line">    <span class="comment"># 日志级别大小关系为：CRITICAL &gt; ERROR</span></div><div class="line">    <span class="comment"># &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</span></div><div class="line"></div><div class="line">    logging.debug(<span class="string">'DEBUG'</span>) <span class="comment"># 屏幕不显示</span></div><div class="line">    logging.info(<span class="string">'INFO'</span>) <span class="comment"># 屏幕不显示</span></div><div class="line">    logging.warning(<span class="string">'WARNING'</span>)</div></pre></td></tr></table></figure>
<p>屏幕输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">wang@Wang:~/Workspace/Python/Template/logger$ ./logger1.py</div><div class="line">WARNING:root:WARNING</div><div class="line">通过logging.basicConfig 函数对日志的输出格式及方式做相关配置</div><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding: utf8 -*-</div><div class="line"></div><div class="line"># -- modules --</div><div class="line">import logging</div><div class="line"></div><div class="line"># -- start --</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    logging.basicConfig(level=logging.DEBUG,</div><div class="line">    format=&apos;[%(asctime)s] %(filename)s [line:%(lineno)d] [%(levelname)s] %(message)s&apos;,</div><div class="line">            datefmt=&apos;%a, %d %b %Y %H:%M:%S&apos;,</div><div class="line">            filename=&apos;test.log&apos;,</div><div class="line">            filemode=&apos;w&apos;)</div><div class="line">    logging.exception(&apos;This is EXCEPTION&apos;)</div><div class="line">    try:</div><div class="line">        1/0</div><div class="line">    except Exception, e:</div><div class="line">        logging.exception(&apos;This is EXCEPTION [%s]&apos; % e)</div><div class="line">        logging.critical(&apos;This is CRITICAL&apos;)</div><div class="line">        logging.error(&apos;This is ERROR&apos;)</div><div class="line">        logging.warning(&apos;This is WARNING&apos;)</div><div class="line">        logging.info(&apos;This is INFO&apos;)</div><div class="line">        logging.debug(&apos;This is DEBUG&apos;)</div></pre></td></tr></table></figure></p>
<p>配置完成后，日志输出至test.log 日志文件</p>
<p><strong>注意：由于日志写入模式设置为’w ‘，因此重复运行时会将之前的日志清空。</strong></p>
<p>logging.basicConfig 函数各参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">filename: 指定日志文件名</div><div class="line">filemode: 和file函数意义相同，指定日志文件的打开模式，’w’或’a’</div><div class="line">format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:</div><div class="line">%(levelno)s: 打印日志级别的数值</div><div class="line">%(levelname)s: 打印日志级别名称</div><div class="line">%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]</div><div class="line">%(filename)s: 打印当前执行程序名</div><div class="line">%(funcName)s: 打印日志的当前函数</div><div class="line">%(lineno)d: 打印日志的当前行号</div><div class="line">%(asctime)s: 打印日志的时间</div><div class="line">%(thread)d: 打印线程ID</div><div class="line">%(threadName)s: 打印线程名称</div><div class="line">%(process)d: 打印进程ID</div><div class="line">%(message)s: 打印日志信息</div><div class="line">datefmt: 指定时间格式，同time.strftime()</div><div class="line">level: 设置日志级别，默认为logging.WARNING</div><div class="line">stream: 指定将日志的输出流，可以指定输出到sys.stderr,</div><div class="line">sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</div></pre></td></tr></table></figure></p>
<p>日志输出内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[Mon, 15 Apr 2013 22:37:28] logger2.py [line:14] [ERROR] This is EXCEPTION</div><div class="line">None</div><div class="line">[Mon, 15 Apr 2013 22:37:28] logger2.py [line:18] [ERROR] This is EXCEPTION [integer division or modulo by zero]</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;./logger2.py&quot;, line 16, in &lt;module&gt;</div><div class="line">1/0</div><div class="line">ZeroDivisionError: integer division or modulo by zero</div><div class="line">[Mon, 15 Apr 2013 22:37:28] logger2.py [line:19] [CRITICAL] This is CRITICAL</div><div class="line">[Mon, 15 Apr 2013 22:37:28] logger2.py [line:20] [ERROR] This is ERROR</div><div class="line">[Mon, 15 Apr 2013 22:37:28] logger2.py [line:21] [WARNING] This is WARNING</div><div class="line">[Mon, 15 Apr 2013 22:37:28] logger2.py [line:22] [INFO] This is INFO</div><div class="line">[Mon, 15 Apr 2013 22:37:28] logger2.py [line:23] [DEBUG] This is DEBUG</div></pre></td></tr></table></figure></p>
<p>特别指出EXCEPTION</p>
<p>在日志中输出为ERROR ，但是会多输出一行错误信息，如果没有设置，则输出None 。如日志第一条</p>
<p>EXCEPTION 的正确用法是嵌套在except:  中，并用以输出错误信息。</p>
<p>要指出的是，错误信息会为EXCEPTION 保持，即使在logging.debug() 后logging.exception(‘X’)</p>
<p>那么仍会输出原来未改变的错误信息，即输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Mon, 15 Apr 2013 xx:xx:xx] logger2.py [line:18] [ERROR] X [integer division or modulo by zero]</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;./logger2.py&quot;, line 16, in &lt;module&gt;</div><div class="line">1/0</div></pre></td></tr></table></figure></p>
<p>将日志同时输出到文件和屏幕<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># -- modules --</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="comment"># -- start --</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    logging.basicConfig(level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(asctime)s %(filename)s [line:%(lineno)d] %(levelname)s %(message)s'</span>,</div><div class="line">            datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</div><div class="line">            filename=<span class="string">'test.log'</span>,</div><div class="line">            filemode=<span class="string">'w'</span>)</div><div class="line"></div><div class="line">    console = logging.StreamHandler()</div><div class="line">    console.setLevel(logging.WARNING)</div><div class="line">    formatter=logging.Formatter(<span class="string">'%(name)-12s: %(levelname)-8s %(message)s'</span>)</div><div class="line">    console.setFormatter(formatter)</div><div class="line">    logging.getLogger(<span class="string">''</span>).addHandler(console)</div><div class="line"></div><div class="line">    logging.debug(<span class="string">'This is DEBUG'</span>)</div><div class="line">    logging.info(<span class="string">'This is INFO'</span>)</div><div class="line">    logging.warning(<span class="string">'This is WARNING'</span>)</div></pre></td></tr></table></figure></p>
<p>注意：basicConfig中设置的为写入文件的日志级别，但是在屏幕输出的内容级别需要额外设置</p>
<p>屏幕输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root : WARNING This is WARNING</div><div class="line">日志文件输出为：</div><div class="line"></div><div class="line">Tue, 16 Apr 2013 16:57:21 logger3.py [line:21] DEBUG This is DEBUG</div><div class="line">Tue, 16 Apr 2013 16:57:21 logger3.py [line:22] INFO This is INFO</div><div class="line">Tue, 16 Apr 2013 16:57:21 logger3.py [line:23] WARNING This is WARNING</div></pre></td></tr></table></figure></p>
<h2 id="logging之日志回滚"><a href="#logging之日志回滚" class="headerlink" title="logging之日志回滚"></a>logging之日志回滚</h2><p>略，没看懂。。</p>
<h2 id="通过logging-config模块配置日志"><a href="#通过logging-config模块配置日志" class="headerlink" title="通过logging.config模块配置日志"></a>通过logging.config模块配置日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div></pre></td><td class="code"><pre><div class="line"># --- logconf.ini -----------------------------------------------------------</div><div class="line"># &quot;loggers&quot;模块包含logger配置的所有关键字，这些关键字并非是直接的配置文件模块名</div><div class="line"># 但是，却是Python脚本调用时会使用到的名字。</div><div class="line"># 单独的模块名命名为&quot;logger_xxx&quot; 其中&quot;xxx&quot;部分为&quot;key&quot;</div><div class="line"># 例如 &quot;logger_root&quot;, &quot;logger_log02&quot;</div><div class="line"></div><div class="line">[loggers]</div><div class="line">keys=root,log02,log03,log04,log05,log06,log07</div><div class="line"></div><div class="line"># &quot;handlers&quot; 模块包含所有的 handler 配置</div><div class="line"># keys的使用方式同loggers</div><div class="line"></div><div class="line">[handlers]</div><div class="line">keys=hand01,hand02,hand03,hand04,hand05,hand06,hand07,hand08,hand09</div><div class="line"></div><div class="line"># &quot;formatters&quot; 模块包含所有的 formatter 配置</div><div class="line"># keys的使用方式同loggers</div><div class="line"></div><div class="line">[formatters]</div><div class="line">keys=form01,form02,form03,form04,form05,form06,form07,form08,form09</div><div class="line"></div><div class="line">[logger_root]</div><div class="line">level=NOTSET # DEBUG, INFO, WARN, ERROR, CRITICAL 或 NOTSET</div><div class="line"># NOTSET: 如果 propagate=1, 输出参考 parent, 否则, 全部输出</div><div class="line">handlers=hand01</div><div class="line">qualname=(root) # root比较特殊, root需要加(), 别的不需要</div><div class="line">propagate=1 # 此参数为非root logger使用</div><div class="line">channel=</div><div class="line">parent=</div><div class="line"></div><div class="line">[logger_log02]</div><div class="line">level=DEBUG</div><div class="line">propagate=1</div><div class="line">qualname=log02 # qualname 填写全称</div><div class="line">handlers=hand02 # 使用的 handler 名称</div><div class="line">channel=log02 # channel表示最末端部分名称</div><div class="line">parent=(root) # 父logger为root</div><div class="line"></div><div class="line">[logger_log03]</div><div class="line">level=INFO</div><div class="line">propagate=1 # 如果 propagate=1, 输出参考 parent</div><div class="line">qualname=log02.log03 # 由于其 parent 为 log02, 所以全称为 log02.log03</div><div class="line">handlers=hand03</div><div class="line">channel=log03 # 填写最末名称, log02.log03 最后为 log03</div><div class="line">parent=log02</div><div class="line"></div><div class="line">[logger_log04]</div><div class="line">level=WARN</div><div class="line">propagate=0</div><div class="line">qualname=log02.log03.log04</div><div class="line">handlers=hand04</div><div class="line">channel=log04</div><div class="line">parent=log03</div><div class="line"></div><div class="line">[logger_log05]</div><div class="line">level=ERROR</div><div class="line">propagate=1</div><div class="line">qualname=log02.log03.log04.log05</div><div class="line">handlers=hand05</div><div class="line">channel=log05</div><div class="line">parent=log04</div><div class="line"></div><div class="line">[logger_log06]</div><div class="line">level=CRITICAL</div><div class="line">propagate=1</div><div class="line">qualname=log02.log03.log04.log05.log06</div><div class="line">handlers=hand06</div><div class="line">channel=log06</div><div class="line">parent=log05</div><div class="line"></div><div class="line">[logger_log07]</div><div class="line">level=WARN</div><div class="line">propagate=1</div><div class="line">qualname=log02.log03.log04.log05.log06.log07</div><div class="line">handlers=hand07</div><div class="line">channel=log07</div><div class="line">parent=log06</div><div class="line"></div><div class="line">[handler_hand01]</div><div class="line">class=StreamHandler # 实例发送错误到流(类似文件的对象)</div><div class="line">level=NOTSET # NOTSET 表示 level 参考 parent</div><div class="line">formatter=form01</div><div class="line">args=(sys.stdout,) # args 为传给 handler 构造函数的参数</div><div class="line">stream=sys.stdout</div><div class="line"></div><div class="line">[handler_hand02]</div><div class="line">class=FileHandler # 实例发送错误到磁盘文件</div><div class="line">level=DEBUG</div><div class="line">formatter=form02</div><div class="line">args=(&apos;python.log&apos;, &apos;w&apos;)</div><div class="line">filename=python.log</div><div class="line">mode=w</div><div class="line"></div><div class="line">[handler_hand03]</div><div class="line">class=handlers.SocketHandler # 实例发送日志到TCP/IP socket</div><div class="line">level=INFO</div><div class="line">formatter=form03</div><div class="line">args=(&apos;localhost&apos;, handlers.DEFAULT_TCP_LOGGING_PORT)</div><div class="line">host=localhost</div><div class="line">port=DEFAULT_TCP_LOGGING_PORT</div><div class="line"></div><div class="line">[handler_hand04]</div><div class="line">class=handlers.DatagramHandler # 实例发送错误信息通过UDP协议</div><div class="line">level=WARN</div><div class="line">formatter=form04</div><div class="line">args=(&apos;localhost&apos;, handlers.DEFAULT_UDP_LOGGING_PORT)</div><div class="line">host=localhost</div><div class="line">port=DEFAULT_UDP_LOGGING_PORT</div><div class="line"></div><div class="line">[handler_hand05]</div><div class="line">class=handlers.SysLogHandler # 实例发送日志到UNIX syslog服务，并支持远程syslog服务</div><div class="line">level=ERROR</div><div class="line">formatter=form05</div><div class="line">args=((&apos;localhost&apos;, handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_USER)</div><div class="line">host=localhost</div><div class="line">port=SYSLOG_UDP_PORT</div><div class="line">facility=LOG_USER</div><div class="line"></div><div class="line">[handler_hand06]</div><div class="line">class=NTEventLogHandler # 实例发送日志到WindowsNT/2000/XP事件日志</div><div class="line">level=CRITICAL</div><div class="line">formatter=form06</div><div class="line">args=(&apos;Python Application&apos;, &apos;&apos;, &apos;Application&apos;)</div><div class="line">appname=Python Application</div><div class="line">dllname=</div><div class="line">logtype=Application</div><div class="line"></div><div class="line">[handler_hand07]</div><div class="line">class=SMTPHandler # 实例发送错误信息到特定的email地址</div><div class="line">level=WARN</div><div class="line">formatter=form07</div><div class="line">args=(&apos;localhost&apos;, &apos;from@abc&apos;, [&apos;user1@abc&apos;, &apos;user2@xyz&apos;], &apos;Logger Subject&apos;)</div><div class="line">host=localhost</div><div class="line">port=25</div><div class="line">from=from@abc</div><div class="line">to=user1@abc,user2@xyz</div><div class="line">subject=Logger Subject</div><div class="line"></div><div class="line">[handler_hand08]</div><div class="line">class=MemoryHandler # 实例发送日志到内存中的缓冲区，并在达到特定条件时清空</div><div class="line">level=NOTSET</div><div class="line">formatter=form08</div><div class="line">target=</div><div class="line">args=(10, ERROR)</div><div class="line">capacity=10</div><div class="line">flushlevel=ERROR</div><div class="line"></div><div class="line">[handler_hand09]</div><div class="line">class=HTTPHandler # 实例发送错误信息到HTTP服务器，通过GET或POST方法</div><div class="line">level=NOTSET</div><div class="line">formatter=form09</div><div class="line">args=(&apos;localhost:9022&apos;, &apos;/log&apos;, &apos;GET&apos;)</div><div class="line">host=localhost</div><div class="line">port=9022</div><div class="line">url=/log</div><div class="line">method=GET</div><div class="line"></div><div class="line">[handler_hand010]</div><div class="line"># BaseRotatingHandler是所有轮徇日志的基类，不能直接使用。</div><div class="line"># 但是可以使用RotatingFileHandler和TimeRotatingFileHandler。</div><div class="line">class=handlers.RotatingFileHandler # 实例发送信息到磁盘文件，并且限制最大的日志文件大小，并适时轮徇</div><div class="line">level=INFO</div><div class="line">formatter=form02</div><div class="line">args=(&apos;test.log&apos;, &apos;a&apos;, 10*1024*1024, 5)</div><div class="line"></div><div class="line">###############################################################################</div><div class="line">[formatter_form01]</div><div class="line">format=F1 %(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form02]</div><div class="line">format=F2 %(asctime)s %(pathname)s(%(lineno)d): %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form03]</div><div class="line">format=F3 %(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form04]</div><div class="line">format=%(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form05]</div><div class="line">format=F5 %(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form06]</div><div class="line">format=F6 %(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form07]</div><div class="line">format=F7 %(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form08]</div><div class="line">format=F8 %(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line">[formatter_form09]</div><div class="line">format=F9 %(asctime)s %(levelname)s %(message)s</div><div class="line">datefmt=</div><div class="line"></div><div class="line"># --- end of logconf.ini ----------------------------------------------------</div><div class="line">logging在低版本（如 2.3.4）中用法有少许差别</div><div class="line">def initial_logger():</div><div class="line">    import logging</div><div class="line">    LOG_FILENAME = &apos;test.log&apos;</div><div class="line">    logger = logging.getLogger()</div><div class="line">    handler = logging.FileHandler(LOG_FILENAME)</div><div class="line">    formatter = logging.Formatter(&apos;[%(asctime)s] %(filename)s[line:%(lineno)d] [%(levelname)s] %(message)s&apos;, &apos;%Y-%m-%d %H:%M:%S&apos;)</div><div class="line">    handler.setFormatter(formatter)</div><div class="line">    logger.addHandler(handler)</div><div class="line">    logger.setLevel(logging.NOTSET)</div><div class="line">    return logger</div><div class="line"></div><div class="line">def main():</div><div class="line">    logger = initial_logger()</div><div class="line">    logger.debug(&quot;test debug&quot;)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在运行程序时，为了监控程序的行为需要对程序行为记录日志。&lt;/p&gt;
&lt;p&gt;在Python 下，就有这样一个专门用来做日志记录的类库，logging&lt;/p&gt;
&lt;h2 id=&quot;简单的将日志打印到屏幕&quot;&gt;&lt;a href=&quot;#简单的将日志打印到屏幕&quot; class=&quot;headerlin
    
    </summary>
    
    
      <category term="Python" scheme="http://wenchao.wang/tags/Python/"/>
    
      <category term="Test" scheme="http://wenchao.wang/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>在IDE中使用 JUnit4 进行单元测试</title>
    <link href="http://wenchao.wang/2016/10/%E5%9C%A8IDE%E4%B8%AD%E4%BD%BF%E7%94%A8-JUnit4-%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://wenchao.wang/2016/10/在IDE中使用-JUnit4-进行单元测试/</id>
    <published>2016-10-16T16:43:39.000Z</published>
    <updated>2016-10-18T07:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eclipse-下的-JUnit-使用"><a href="#Eclipse-下的-JUnit-使用" class="headerlink" title="Eclipse 下的 JUnit 使用"></a>Eclipse 下的 JUnit 使用</h2><h3 id="新建项目JUnitTest，创建Calculator类"><a href="#新建项目JUnitTest，创建Calculator类" class="headerlink" title="新建项目JUnitTest，创建Calculator类"></a>新建项目JUnitTest，创建Calculator类</h3><p>编写Calculator类<br>为了方便测试，在Calculator类 中添加一些 Bugs<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> result; <span class="comment">// 静态变量，用于存储运行结果</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        result = result + n;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">substract</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        result = result - <span class="number">1</span>; <span class="comment">// Bug: 正确的应该是 result =result-n</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    &#125; <span class="comment">// 此方法尚未写好</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        result = result / n;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        result = n * n;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squareRoot</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;)</div><div class="line">            ; <span class="comment">// Bug : 死循环</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="comment">// 将结果清零</span></div><div class="line">        result = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="将JUnit4单元测试包引入这个项目"><a href="#将JUnit4单元测试包引入这个项目" class="headerlink" title="将JUnit4单元测试包引入这个项目"></a>将JUnit4单元测试包引入这个项目</h3><p>在JUnitTest 项目上，单击右键，选择 Properties （属性）</p>
<p>在弹出的属性窗口中，首先在左边选择“Java Build Path ”，然后到右上选择“Libraries ”标签，之后在最右边点击“Add Library… ”按钮，如下图所示：</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Eclipse-下的-JUnit-使用&quot;&gt;&lt;a href=&quot;#Eclipse-下的-JUnit-使用&quot; class=&quot;headerlink&quot; title=&quot;Eclipse 下的 JUnit 使用&quot;&gt;&lt;/a&gt;Eclipse 下的 JUnit 使用&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="JUnit" scheme="http://wenchao.wang/tags/JUnit/"/>
    
      <category term="Java" scheme="http://wenchao.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用 PyUnit 构建 Python单元测试</title>
    <link href="http://wenchao.wang/2016/10/%E4%BD%BF%E7%94%A8-PyUnit-%E6%9E%84%E5%BB%BA-Python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://wenchao.wang/2016/10/使用-PyUnit-构建-Python单元测试/</id>
    <published>2016-10-16T14:25:16.000Z</published>
    <updated>2016-12-10T13:16:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>Python 单元测试框架（The Python unit testing framework） ，简称为PyUnit ， 是 Kent Beck 和 Erich Gamma 这两位聪明的家伙所设计的 JUnit  的Python 版本。<br>此文档仅阐述针对Python 的单元测试PyUnit 的设计与使用。<br>自从 Python 2.1  版本后，PyUnit 成为 Python 标准库的一部分。</p>
<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>PyUnit 可以在Python 1.5.2 及更高版本上运行。</p>
<h2 id="使用PyUnit构建自己的测试"><a href="#使用PyUnit构建自己的测试" class="headerlink" title="使用PyUnit构建自己的测试"></a>使用PyUnit构建自己的测试</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>编写测试所需的类可以在“unittest” 模块中找到。此模块是Python 2.1 和更高版本的标准库的一部分。<br>为使此模块能在你的代码中正常工作,你只需确保包含 <code>unittest.py</code> 文件的目录在你的Python 搜索路径中。</p>
<blockquote>
<p>注意，只有完成此项工作才能运行PyUnit 所自带的例子，除非将 <code>unittest.py</code> 复制到例子目录。</p>
</blockquote>
<h3 id="测试用例介绍"><a href="#测试用例介绍" class="headerlink" title="测试用例介绍"></a>测试用例介绍</h3><p>单元测试是由一些测试用例（Test Cases） 构建组成的。测试用例是被设置用来检测正确性的单独的场景。在PyUnit 中，unittest 模块中的TestCase 类 代表测试用例。<br>TestCase类 的实例是可以完全运行测试方法和可选的设置（set-up） 以及清除（tidy-up） 代码的对象。<br>TestCase 实例的测试代码必须是自包含的，换言之，它可以单独运行或与其它任意数量的测试用例共同运行。</p>
<p><strong> 以下测试皆为对此类测试 </strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># -- class &amp; functions --</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span></div><div class="line">    <span class="string">'''need to test'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size = <span class="params">(<span class="number">40</span>, <span class="number">40</span>)</span>)</span>:</span></div><div class="line">        self._size = size</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSize</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._size</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(self, width, height)</span>:</span></div><div class="line">        <span class="keyword">if</span> width &lt; <span class="number">0</span> <span class="keyword">or</span> height &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> VauleError, <span class="string">"illegal size"</span></div><div class="line">        self._size = (width, height+<span class="number">1</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispose</span><span class="params">(size)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<h3 id="创建一个简单测试用例"><a href="#创建一个简单测试用例" class="headerlink" title="创建一个简单测试用例"></a>创建一个简单测试用例</h3><p>通过覆盖runTest方法即可得到最简单的测试用例子类以运行 一些测试代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 静态方法</span></div><div class="line"><span class="comment"># 采用静态方法，要为每个要测试的方法编写一个测试类</span></div><div class="line"><span class="comment"># （该类通过覆盖runTest()方法来执行测试），</span></div><div class="line"><span class="comment"># 并在每一个测试类中生成一个待测试的对象。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetSizeTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">        widget = Widget()</div><div class="line">        self.assertEqual(widget.getSize(), (<span class="number">40</span>, <span class="number">40</span>))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetResizeTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">        widget = Widget()</div><div class="line">        widget.resize(<span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        self.assertEqual(widget.getSize(), (<span class="number">100</span>, <span class="number">100</span>))</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：为进行测试，我们只是使用了Python 内建的“assert ”语句。如果在测试用例运行时断言（assertion ）为假，AssertionError 异常会被抛出，并且测试框架会认为测试用例失败。其它非“assert ”检查所抛出的异常会被测试框架认为是“errors ”。</p>
</blockquote>
<p>运行测试用例的方法会在后面介绍。现在我们只是通过调用无参数的构造器（constructor）  来创建一个测试用例的实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">testCase = WidgetSizeTestCase()</div></pre></td></tr></table></figure></p>
<h3 id="复用设置代码：创建固件"><a href="#复用设置代码：创建固件" class="headerlink" title="复用设置代码：创建固件"></a>复用设置代码：创建固件</h3><p>这样的测试用例数量巨大且它们的设置需要很多重复性工作。在上面的测试用例中， 如若在100个Widget 测试用例的每一个子类中都创建一个“Widget ”，那会导致难看的重复。<br>幸运的是，我们可以将这些设置代码提取出来并放置在一个叫做setUp 的 钩子方法（hook method） 中。测试框架会在运行测试时自动调用此方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleWidgetTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget = Widget(<span class="string">"The widget"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget.dispose()</div><div class="line">        self.widget = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetSizeTestCase</span><span class="params">(SimpleWidgetTestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">        widget = Widget()</div><div class="line">        self.assertEqual(widget.getSize(), (<span class="number">40</span>, <span class="number">40</span>))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetResizeTestCase</span><span class="params">(SimpleWidgetTestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">        widget = Widget()</div><div class="line">        widget.resize(<span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        self.assertEqual(widget.getSize(), (<span class="number">100</span>, <span class="number">100</span>))</div></pre></td></tr></table></figure></p>
<p>如果setUp 方法在测试运行时抛出异常，框架会认为测试遇到了错误并且 runTest 不会被执行。<br>类似的，我们也可以提供一个tearDown 方法来完成在runTest 运行之后的清理工作。<br>如果setUp 执行成功， 那么无论runTest 是否成功，tearDown 方法都将被执行。</p>
<blockquote>
<p>Such a working environment for the testing code is termed a fixture. 这个测试代码的运行环境被称为固件 (fixture，译者注：此为暂定译法，意为固定的构件或方法)。</p>
</blockquote>
<h3 id="包含多个测试方法的测试用例类"><a href="#包含多个测试方法的测试用例类" class="headerlink" title="包含多个测试方法的测试用例类"></a>包含多个测试方法的测试用例类</h3><p>很多小型测试用例经常会使用相同的固件。在这个用例中，我们最终从SimpleWidgetTestCase 继承产生很多仅包含一个方法的类，如 DefaultWidgetSizeTestCase 。这是很耗时且不被鼓励的，因此，沿用JUnit 的风格，PyUnit 提供了一个更简便的方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="comment"># 执行测试类</span></div><div class="line">    <span class="comment"># dynamic 测试方法</span></div><div class="line">    <span class="comment"># 覆盖unittest中 setUp, 在其中完成初始化</span></div><div class="line">    <span class="comment"># 覆盖unittest中tearDown, 释放资源</span></div><div class="line">    <span class="comment"># dynamic 测试不需要覆盖 runTest 方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget = Widget();</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget.dispose()</div><div class="line">        self.widget = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testSize</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertEqual(self.widget.getSize(), (<span class="number">40</span>, <span class="number">40</span>))</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testResize</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget.resize(<span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        self.assertEqual(self.widget.getSize(), (<span class="number">100</span>, <span class="number">100</span>))</div></pre></td></tr></table></figure></p>
<p>在这个用例中，我们没有提供runTest 方法，而是两个不同的测试方法。类实例将创建和销毁各自的self.widget 并运行某一个test 方法。 当创建类实例时，我们必须通过向构造器传递方法的名称来指明哪个测试方法将被运行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">defaultSizeTestCase = WidgetTestCase(<span class="string">"testSize"</span>)</div><div class="line">resizeTestCase = WidgetTestCase(<span class="string">"testResize"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="将测试用例聚合成测试套件"><a href="#将测试用例聚合成测试套件" class="headerlink" title="将测试用例聚合成测试套件"></a>将测试用例聚合成测试套件</h3><p>测试用例实例可以根据它们所测试的特性组合到一起。PyUnit 为此提供了一个机制叫做”测试套件“（test suite) 。它由unittest模块 中的TestSuite类 表示,在每个测试模块中提供一个返回已创建测试套件的可调用对象，会是一个使测试更加便捷的好方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试用例集, 方法一</span></div><div class="line"><span class="comment"># 全局函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">suite</span><span class="params">()</span>:</span></div><div class="line">    suite = unittest.TestSuite()</div><div class="line">    suite.addTest(WidgetTestCase(<span class="string">"testSize"</span>))</div><div class="line">    suite.addTest(WidgetTestCase(<span class="string">"testResize"</span>))</div><div class="line">    <span class="keyword">return</span> suite</div></pre></td></tr></table></figure></p>
<p>甚至可写成:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试用例集, 方法二</span></div><div class="line"><span class="comment"># 定义 TestSuite 子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetTestSuite</span><span class="params">(unittest.TestSuite)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        unittest.TestSuite.__init__(self, map(WidgetTestCase,(<span class="string">"testSize"</span>,<span class="string">"testResize"</span>)))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">suite</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> WidgetTestSuite()</div></pre></td></tr></table></figure></p>
<p>因为创建一个包含很多相似名称的测试方法的TestCase 子类是一种很常见的模式，所以unittest模块 提供一个便捷方法，makeSuite ，来 创建一个由测试用例类内所有测试用例组成的测试套件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试用例集, 方法三</span></div><div class="line"><span class="comment"># 如果用于测试的类中所有的测试方法都以test开头，</span></div><div class="line"><span class="comment"># Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">suite</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> unittest.makeSuite(WidgetTestCase, <span class="string">"test"</span>)</div></pre></td></tr></table></figure></p>
<p>需要注意的是，当使用makeSuite 方法时，测试套件运行每个测试用例的顺序是由测试方法名根据Python 内建函数cmp 所排序的顺序而决定的。</p>
<h3 id="嵌套测试套件"><a href="#嵌套测试套件" class="headerlink" title="嵌套测试套件"></a>嵌套测试套件</h3><p>我们经常希望将一些测试套件组合在一起来一次性的测试整个系统。这很简单，因为多个TestSuite 可以被加入进另一个TestSuite ，就如同 多个TestCase 被加进一个TestSuite 中一样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">suite1 = module1.TheTestSuite()</div><div class="line">suite2 = module2.TheTestSuite()</div><div class="line">alltests = unittest.TestSuite((suite1, suite2))</div></pre></td></tr></table></figure></p>
<h3 id="测试代码放置位置"><a href="#测试代码放置位置" class="headerlink" title="测试代码放置位置"></a>测试代码放置位置</h3><p>可以将测试用例定义与被测试代码置于同一个模块中（例如“widget.py ”），但是将测试代码放置在单独的模块中（如“widgettests.py ”）会有一些优势：</p>
<ul>
<li>测试模块可以从命令行单独执行</li>
<li>测试代码可以方便地从发布代码中分离</li>
<li>少了在缺乏充足理由的情况下为适应被测试代码而更改测试代码的诱惑</li>
<li>相对于被测试代码，测试代码不应该被频繁的修改</li>
<li>被测试代码可以更方法的进行重构</li>
<li>既然C语言代码的测试应该置于单独的模块，那何不保持这个一致性呢？</li>
<li>如果测试策略改变，也无需修改被测试源代码</li>
<li>交互式运行测试</li>
</ul>
<p>我们编写测试的主要目的是运行它们并检查我们的软件是否工作正常。测试框架使用“TestRunner”类 来为运行测试提供环境。最常用的TestRunner 是TextTestRunner ， 它可以以文字方式运行测试并报告结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 实施测试</span></div><div class="line"><span class="comment"># PyUnit使用TestRunner类作为测试用例的基本执行环境，</span></div><div class="line"><span class="comment"># 来驱动整个单元测试过程。</span></div><div class="line"><span class="comment"># Python开发人员在进行单元测试时一般不直接使用TestRunner类，</span></div><div class="line"><span class="comment"># 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来</span></div><div class="line"></div><div class="line"><span class="comment"># -- start --</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 构造测试集</span></div><div class="line">    suite = suite()</div><div class="line"></div><div class="line">    <span class="comment"># 执行测试</span></div><div class="line">    runner = unittest.TextTestRunner()</div><div class="line">    runner.run(suite)</div></pre></td></tr></table></figure></p>
<p>TextTestRunner 默认将输出发送到sys.stderr ，但是你可以通过向它的构造器传递一个不同的类似文件（file-object ）对象来改变默认方式。<br>如需在Python 解释器会话中运行测试，这样使用TextTestRunner 是一个理想的方法。</p>
<h3 id="更多关于测试条件"><a href="#更多关于测试条件" class="headerlink" title="更多关于测试条件"></a>更多关于测试条件</h3><p>建议过应使用Python 内建断言机制来检查测试用例中的条件，而不应使用自己编写的替代品，因为assert 更简单，简明且为大家所熟悉。<br>但是值得注意的是，如果在运行测试的同时Python 优化选项被打开（生成“.pyo ”字节码文件），那么assert 语句将会被跳过，使得测试用例变得无用。<br>我为那些需要使用Python 优化选项的用户编写了一个 assert 方法并添加进TestCase类 内。它的功能和内建的assert 相同且 不会被优化删除，但是使用较麻烦且所输出错误信息帮助较小：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">    self.assert_(self.widget.size() == (<span class="number">100</span>,<span class="number">100</span>), <span class="string">"size is wrong"</span>)</div></pre></td></tr></table></figure></p>
<p>我还在TestCase类 中提供了failIf 和failUnless 两个方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">    self.failIf(self.widget.size() &lt;&gt; (<span class="number">100</span>,<span class="number">100</span>))</div></pre></td></tr></table></figure></p>
<p>测试方法还可以通过调用fail 方法使得测试立即失败：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(something, <span class="string">"blah"</span>):</div><div class="line">    self.fail(<span class="string">"blah missing"</span>)</div><div class="line">    <span class="comment"># or just 'self.fail()'</span></div></pre></td></tr></table></figure></p>
<h3 id="测试相等性"><a href="#测试相等性" class="headerlink" title="测试相等性"></a>测试相等性</h3><p>最常用的断言是测试相等性。如果断言失败，开发者通常希望看到实际错误值。<br>TestCase 包含一对方法assertEqual 和assertNotEqual 用于此目的(如果你喜欢，你还可以使用别名：failUnlessEqual  和 failIfEqual ):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testSomething</span><span class="params">(self)</span>:</span></div><div class="line">    self.widget.resize(<span class="number">100</span>,<span class="number">100</span>)</div><div class="line">    self.assertEqual(self.widget.size, (<span class="number">100</span>,<span class="number">100</span>))</div></pre></td></tr></table></figure></p>
<h3 id="测试异常"><a href="#测试异常" class="headerlink" title="测试异常"></a>测试异常</h3><p>测试经常希望检查在某个环境中是否出现异常。如果期待的异常没有抛出，测试将失败。这很容易做到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        self.widget.resize(<span class="number">-1</span>,<span class="number">-1</span>)</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        fail(<span class="string">"expected a ValueError"</span>)</div></pre></td></tr></table></figure></p>
<p>通常，预期异常源（译者注：将抛出异常的代码）是一个可调用对象；为此，TestCase 有一个assertRaises 方法。此方法的前两个参数是应该出现在“except ”语句中的异常和可调用对象。剩余的参数是应该传递给可调用对象的参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></div><div class="line">    self.assertRaises(ValueError, self.widget.resize, <span class="number">-1</span>, <span class="number">-1</span>)</div></pre></td></tr></table></figure></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>完整测试代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Copyright © 2013 Al™, All Rights Reserved.</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2013/03/21 14:48:49</div><div class="line">@module: unitest_test.py</div><div class="line">@version:</div><div class="line">@license: Copyright © 2013 Al™, All Rights Reserved.</div><div class="line">@author: Wang Wenchao</div><div class="line">@contact: U&#123;B&#123;Wang Wenchao&#125;&#125;</div><div class="line">@see:</div><div class="line">@note:</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># -- modules --</span></div><div class="line"><span class="keyword">from</span> testmodule <span class="keyword">import</span> Widget</div><div class="line"><span class="keyword">import</span> unittest</div><div class="line"></div><div class="line"><span class="comment"># -- global --</span></div><div class="line"></div><div class="line"><span class="comment"># -- class &amp; functions --</span></div><div class="line"></div><div class="line"><span class="comment"># ============================================================================</span></div><div class="line"><span class="comment"># 静态方法</span></div><div class="line"><span class="comment"># 采用静态方法，要为每个要测试的方法编写一个测试类</span></div><div class="line"><span class="comment"># （该类通过覆盖runTest()方法来执行测试），</span></div><div class="line"><span class="comment"># 并在每一个测试类中生成一个待测试的对象。</span></div><div class="line"><span class="comment">#class WidgetSizeTestCase(unittest.TestCase):</span></div><div class="line"><span class="comment">#   def runTest(self):</span></div><div class="line"><span class="comment">#       widget = Widget()</span></div><div class="line"><span class="comment">#       self.assertEqual(widget.getSize(), (40, 40))</span></div><div class="line"></div><div class="line"><span class="comment">#class WidgetResizeTestCase(unittest.TestCase):</span></div><div class="line"><span class="comment">#   def runTest(self):</span></div><div class="line"><span class="comment">#       widget = Widget()</span></div><div class="line"><span class="comment">#       widget.resize(100, 100)</span></div><div class="line"><span class="comment">#       self.assertEqual(widget.getSize(), (100, 100))</span></div><div class="line"></div><div class="line"><span class="comment"># 动态方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="comment"># 执行测试类</span></div><div class="line">    <span class="comment"># dynamic 测试方法</span></div><div class="line">    <span class="comment"># 覆盖unittest中 setUp, 在其中完成初始化</span></div><div class="line">    <span class="comment"># 覆盖unittest中tearDown, 释放资源</span></div><div class="line">    <span class="comment"># dynamic 测试不需要覆盖 runTest 方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget = Widget();</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget.dispose()</div><div class="line">        self.widget = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testSize</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertEqual(self.widget.getSize(), (<span class="number">40</span>, <span class="number">40</span>))</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testResize</span><span class="params">(self)</span>:</span></div><div class="line">        self.widget.resize(<span class="number">100</span>, <span class="number">100</span>)</div><div class="line">        self.assertEqual(self.widget.getSize(), (<span class="number">100</span>, <span class="number">100</span>))</div><div class="line"></div><div class="line"><span class="comment"># ============================================================================</span></div><div class="line"><span class="comment"># 测试用例集, 方法一</span></div><div class="line"><span class="comment"># 全局函数</span></div><div class="line"><span class="comment">#def suite():</span></div><div class="line"><span class="comment">#   suite = unittest.TestSuite()</span></div><div class="line"><span class="comment">#   suite.addTest(WidgetTestCase("testSize"))</span></div><div class="line"><span class="comment">#   suite.addTest(WidgetTestCase("testResize"))</span></div><div class="line"><span class="comment">#   return suite</span></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># 测试用例集, 方法二</span></div><div class="line"><span class="comment"># 定义 TestSuite 子类</span></div><div class="line"><span class="comment">#class WidgetTestSuite(unittest.TestSuite):</span></div><div class="line"><span class="comment">#   def __init__(self):</span></div><div class="line"><span class="comment">#       unittest.TestSuite.__init__(self, map(WidgetTestCase,("testSize","testResize")))</span></div><div class="line"></div><div class="line"><span class="comment">#   def suite():</span></div><div class="line"><span class="comment">#       return WidgetTestSuite()</span></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># 测试用例集, 方法三</span></div><div class="line"><span class="comment"># 如果用于测试的类中所有的测试方法都以test开头，</span></div><div class="line"><span class="comment"># Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">suite</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> unittest.makeSuite(WidgetTestCase, <span class="string">"test"</span>)</div><div class="line"></div><div class="line"><span class="comment"># ============================================================================</span></div><div class="line"></div><div class="line"><span class="comment"># 实施测试</span></div><div class="line"><span class="comment"># PyUnit使用TestRunner类作为测试用例的基本执行环境，</span></div><div class="line"><span class="comment"># 来驱动整个单元测试过程。</span></div><div class="line"><span class="comment"># Python开发人员在进行单元测试时一般不直接使用TestRunner类，</span></div><div class="line"><span class="comment"># 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来</span></div><div class="line"></div><div class="line"><span class="comment"># -- start --</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 构造测试集</span></div><div class="line">    suite = suite()</div><div class="line"></div><div class="line">    <span class="comment"># 执行测试</span></div><div class="line">    runner = unittest.TextTestRunner()</div><div class="line">    runner.run(suite)</div></pre></td></tr></table></figure></p>
<p>运行输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">wang@Wang-Satellite-M300:~/Workspace/Python/Template/unittest$ ./unittest_test.py</div><div class="line">F.</div><div class="line">======================================================================</div><div class="line">FAIL: testResize (__main__.WidgetTestCase)</div><div class="line">———————————————————————-</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;./unittest_test.py&quot;, line 58, in testResize</div><div class="line">self.assertEqual(self.widget.getSize(), (100, 100))</div><div class="line">AssertionError: Tuples differ: (100, 101) != (100, 100)</div><div class="line"></div><div class="line">First differing element 1:</div><div class="line">101</div><div class="line">100</div><div class="line"></div><div class="line">- (100, 101)</div><div class="line">? ^</div><div class="line"></div><div class="line">+ (100, 100)</div><div class="line">? ^</div><div class="line"></div><div class="line">———————————————————————-</div><div class="line">Ran 2 tests in 0.001s</div><div class="line"></div><div class="line">FAILED (failures=1)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;Python 单元测试框架（The Python unit testing framework） ，简称为PyUnit ， 是 Kent B
    
    </summary>
    
    
      <category term="Python" scheme="http://wenchao.wang/tags/Python/"/>
    
      <category term="Test" scheme="http://wenchao.wang/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>漫谈 JDBC 以及与 Spring 之整合</title>
    <link href="http://wenchao.wang/2016/10/%E6%BC%AB%E8%B0%88-JDBC-%E4%BB%A5%E5%8F%8A%E4%B8%8E-Spring-%E4%B9%8B%E6%95%B4%E5%90%88/"/>
    <id>http://wenchao.wang/2016/10/漫谈-JDBC-以及与-Spring-之整合/</id>
    <published>2016-10-14T14:54:38.000Z</published>
    <updated>2016-10-18T07:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍-JDBC"><a href="#介绍-JDBC" class="headerlink" title="介绍 JDBC"></a>介绍 JDBC</h1><p>JDBC  是 Java 数据库连接（Java Database Connectivity）的简称，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，用来连接 Java 与数据库，提供了诸如查询和更新数据库中数据的方法。</p>
<h2 id="JDBC-架构"><a href="#JDBC-架构" class="headerlink" title="JDBC 架构"></a>JDBC 架构</h2><p>JDBC  的 API  支持两层和三层处理模式进行数据库访问，但一般的 JDBC  架构由两层处理模式组成：</p>
<ul>
<li>JDBC API : 提供了应用程序对 JDBC  管理器的连接。</li>
<li>JDBC Driver API : 提供了 JDBC  管理器对驱动程序连接。</li>
</ul>
<p>JDBC API  使用驱动程序管理器和数据库特定的驱动程序来提供异构（heterogeneous）数据库的透明连接。</p>
<p>JDBC  驱动程序管理器可确保正确的驱动程序来访问每个数据源。该驱动程序管理器能够支持连接到多个异构数据库的多个并发的驱动程序。</p>
<p>以下是结构图，其中显示了驱动程序管理器相对于在 JDBC  驱动程序和 Java  应用程序所处的位置。</p>
<h2 id="API-与类概述"><a href="#API-与类概述" class="headerlink" title="API 与类概述"></a>API 与类概述</h2><blockquote>
<p>JDBC API 主要位于JDK 中的java.sql 包中（之后扩展的内容位于javax.sql 包中），主要包括（斜体代表接口，需驱动程序提供者来具体实现）：</p>
<p><code>DriverManager</code> ：负责加载各种不同驱动程序（Driver ），并根据不同的请求，向调用者返回相应的数据库连接（Connection ）。<br><code>Driver</code> ：驱动程序，会将自身加载到DriverManager 中去，并处理相应的请求并返回相应的数据库连接（Connection ）。<br><code>Connection</code> ：数据库连接，负责进行与数据库间的通讯，SQL 执行以及事务处理都是在某个特定Connection 环境中进行的。可以产生用以执行SQL 的Statement 。<br><strong><code>Statement</code> ：用以执行SQL 查询和更新（针对静态SQL 语句和单次执行）。<br><code>PreparedStatement</code> ：用以执行包含动态参数的SQL 查询和更新（在服务器端编译，允许重复执行以提高效率）。<br><code>CallableStatement</code> ：用以调用数据库中的存储过程。</strong><br><code>SQLException</code> ：代表在数据库连接的创建和关闭和SQL语句的执行过程中发生了例外情况（即错误）。<br>摘自 wikipedia，Java数据库连接，<a href="https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5</a></p>
</blockquote>
<p>除了以上 API ，JDBC  还提供了以下类：</p>
<p><code>ResultSet</code>  : 在你使用语句对象执行 SQL  查询后，这些对象保存从数据获得的数据。它作为一个迭代器，让您可以通过它的数据来移动。</p>
<h2 id="JDBC-使用基本思路"><a href="#JDBC-使用基本思路" class="headerlink" title="JDBC 使用基本思路"></a>JDBC 使用基本思路</h2><ol>
<li>制作到数据库的连接。</li>
<li>创建 SQL 或 MySQL 语句。</li>
<li>执行 SQL 或 MySQL 查询数据库。</li>
<li>查看和修改所产生的记录。</li>
</ol>
<h1 id="J2SE-通过-JDBC-连接数据库"><a href="#J2SE-通过-JDBC-连接数据库" class="headerlink" title="J2SE 通过 JDBC 连接数据库"></a>J2SE 通过 JDBC 连接数据库</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li>安装完成 Java</li>
<li>部署好数据库，以下采用的是 MySQL  数据库</li>
<li>下载相关驱动，MySQL 的 JDBC 驱动为使用的是 mysql-connector-java-5.1.32-bin.jar ，<a href="https://dev.mysql.com/downloads/connector/j/3.1.html" target="_blank" rel="external">下载地址</a></li>
</ol>
<h2 id="创建-JDBC-应用程序"><a href="#创建-JDBC-应用程序" class="headerlink" title="创建 JDBC 应用程序"></a>创建 JDBC 应用程序</h2><ol>
<li>导入数据包 . 需要包括含有需要进行数据库编程的JDBC类 的包。大多数情况下，使用 import java.sql.*  就可以了.</li>
<li>注册JDBC驱动程序 . 需要初始化驱动程序，可以与数据库打开一个通信通道。</li>
<li>打开连接. 需要使用DriverManager.getConnection()  方法创建一个Connection 对象，它代表与数据库的物理连接。</li>
<li>执行查询 . 需要使用类型声明的对象建立并提交一个SQL 语句到数据库。</li>
<li>从结果集中提取数据 . 要求使用适当的关于ResultSet.getXXX() 方法来检索结果集的数据。</li>
<li>清理环境. 需要明确地关闭所有的数据库资源相对依靠JVM 的垃圾收集。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** STEP 1. Import required packages 导入数据包 */</span></div><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCExample</span> </span>&#123;</div><div class="line">    <span class="comment">/** JDBC driver name and database URL</span></div><div class="line">     *  定义 JDBC 驱动以及数据库地址，此处数据库为本地的 test */</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">"jdbc:mysql://localhost/test"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**  Database credentials</span></div><div class="line">     *   数据库的账号、密码</div><div class="line">     *   */</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"root"</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        Statement stmt = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/** STEP 2: Register JDBC driver</span></div><div class="line">             * 加载 JDBC 驱动程序 Driver 至 DriverManager */</div><div class="line">            Class.forName(JDBC_DRIVER);</div><div class="line"></div><div class="line">            <span class="comment">/** STEP 3: Open a connection</span></div><div class="line">             *  通过 DB_URL, 数据库账号和密码来获取相应的数据库连接 */</div><div class="line">            System.out.println(<span class="string">"Connecting to database..."</span>);</div><div class="line">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</div><div class="line"></div><div class="line">            <span class="comment">/** STEP 4: Execute a query</span></div><div class="line">             *  获取 connection 之后，可以创建 Statement 用来执行 SQL 语句</div><div class="line">             *  其中 结果存储在 ResultSet 结果集 */</div><div class="line">            System.out.println(<span class="string">"Creating statement..."</span>);</div><div class="line">            stmt = conn.createStatement();</div><div class="line">            String sql;</div><div class="line">            sql = <span class="string">"SELECT * FROM t_user"</span>;</div><div class="line">            ResultSet rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">            <span class="comment">/** STEP 5: Extract data from result set</span></div><div class="line">             *  通过遍历结果集顺序访问数据</div><div class="line">             *  具体是 getInt 还是 getString，请参考附录一：SQL 到 Java 的数据类型的映射*/</div><div class="line">            <span class="keyword">while</span>(rs.next())&#123;</div><div class="line">                <span class="comment">//Retrieve by column name</span></div><div class="line">                <span class="keyword">int</span> id  = rs.getInt(<span class="string">"id"</span>);</div><div class="line">                String name = rs.getString(<span class="string">"name"</span>);</div><div class="line">                <span class="keyword">int</span> age = rs.getInt(<span class="string">"age"</span>);</div><div class="line">                <span class="keyword">int</span> gender = rs.getInt(<span class="string">"gender"</span>);</div><div class="line"></div><div class="line">                <span class="comment">//Display values</span></div><div class="line">                System.out.println(<span class="string">"ID: "</span> + id + <span class="string">", Name: "</span> + name</div><div class="line">                        + <span class="string">", Age: "</span> + age + <span class="string">", Gender: "</span> + gender);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/** STEP 6: Clean-up environment</span></div><div class="line">             * 清理环境，需要关闭结果集、Statement 以及数据库连接</div><div class="line">             * 注意！关闭的顺序！*/</div><div class="line">            rs.close();</div><div class="line">            stmt.close();</div><div class="line">            conn.close();</div><div class="line">        &#125;<span class="keyword">catch</span>(SQLException se)&#123;</div><div class="line">            <span class="comment">/** Handle errors for JDBC</span></div><div class="line">             * 如果数据库操作失败，JDBC将抛出一个SQLException。</div><div class="line">             * 一般来说，此类异常很少能够恢复，唯一能做的就是尽可能详细的打印异常日记。</div><div class="line">             * 推荐的做法是将SQLException翻译成应用程序领域相关的异常（非强制处理异</div><div class="line">             * 常）并最终回滚数据库和通知用户。*/</div><div class="line">            se.printStackTrace();</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            <span class="comment">//Handle errors for Class.forName</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="comment">//finally block used to close resources</span></div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</div><div class="line">                    stmt.close();</div><div class="line">            &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</div><div class="line">            &#125;<span class="comment">// nothing we can do</span></div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</div><div class="line">                    conn.close();</div><div class="line">            &#125;<span class="keyword">catch</span>(SQLException se)&#123;</div><div class="line">                se.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Goodbye!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上一例为模板，以下例子仅填充<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Connection conn = <span class="keyword">null</span>;</div><div class="line">Statement stmt = <span class="keyword">null</span>;</div><div class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	Class.forName(JDBC_DRIVER);</div><div class="line">	conn = DriverManager.getConnection(DB_URL, USER, PASS);</div><div class="line"></div><div class="line">	<span class="comment">/* 在此填充代码 */</span></div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">if</span> (stmt != <span class="keyword">null</span>)</div><div class="line">			stmt.close();</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException se2) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (conn != <span class="keyword">null</span>)</div><div class="line">				conn.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException se) &#123;</div><div class="line">			se.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Example-1：executeQuery-，仅单行数据"><a href="#Example-1：executeQuery-，仅单行数据" class="headerlink" title="Example 1：executeQuery()，仅单行数据"></a>Example 1：executeQuery()，仅单行数据</h3><p>返回一个 ResultSet 对象。当希望得到一个结果集时使用该方法，如使用 SELECT 语句。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//////// Example 1: statement, executeQuery</span></div><div class="line">stmt = conn.createStatement();</div><div class="line">String sql1 = <span class="string">"SELECT COUNT(DISTINCT `name`) AS 'cnt' FROM `user`"</span>;</div><div class="line">ResultSet rs = stmt.executeQuery(sql1);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">	<span class="keyword">int</span> cnt1 = rs.getInt(<span class="number">1</span>); <span class="comment">// 此处的 column，第一列下标为 1，而非 0</span></div><div class="line">	<span class="keyword">int</span> cnt2 = rs.getInt(<span class="string">"cnt"</span>);</div><div class="line">	System.out.println(<span class="string">"count: "</span> + cnt1 + <span class="string">", "</span> + cnt2);</div><div class="line">&#125;</div><div class="line">rs.close();</div></pre></td></tr></table></figure></p>
<h3 id="Example-2：executeUpdate"><a href="#Example-2：executeUpdate" class="headerlink" title="Example 2：executeUpdate()"></a>Example 2：executeUpdate()</h3><p>返回执行 SQL 语句影响的行的数目。使用该方法来执行 SQL 语句，得到一些受影响的行的数目，例如，INSERT，UPDATE 或 DELETE 语句<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//////// Example 2: statement, executeUpdate</span></div><div class="line">String sql2 = <span class="string">"INSERT INTO `user`(name, age) VALUES ('noname', 30)"</span>;</div><div class="line"><span class="keyword">int</span> ret2 = stmt.executeUpdate(sql2);</div></pre></td></tr></table></figure></p>
<h3 id="Example-3：execute"><a href="#Example-3：execute" class="headerlink" title="Example 3：execute()"></a>Example 3：execute()</h3><p>如果 ResultSet 对象可以被检索，则返回的布尔值为 true ，否则返回 false 。当需要使用真正的动态 SQL 时，可以使用这个方法来执行 SQL DDL 语句。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//////// Example 3: statement, execute</span></div><div class="line">String sql3 = <span class="string">"CREATE TABLE tmp(id int,name VARCHAR(255))"</span>;</div><div class="line"><span class="keyword">boolean</span> ret3 = stmt.execute(sql3);</div></pre></td></tr></table></figure></p>
<h3 id="Example-4：PrepareStatement"><a href="#Example-4：PrepareStatement" class="headerlink" title="Example 4：PrepareStatement"></a>Example 4：PrepareStatement</h3><p>使用问号作为参数的标示。进行参数设置与大部分Java API中下标的使用方法不同，字段的下标从1开始，1代表第一个问号<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/////// Example 4: preparedStatement</span></div><div class="line">String sql4 = <span class="string">"SELECT * FROM `user` WHERE name=? AND age=?"</span>;</div><div class="line">pstmt = conn.prepareStatement(sql4);</div><div class="line">pstmt.setString(<span class="number">1</span>, <span class="string">"test"</span>);</div><div class="line">pstmt.setInt(<span class="number">2</span>, <span class="number">10</span>);</div><div class="line">ResultSet rs4 = pstmt.executeQuery();</div><div class="line"><span class="keyword">while</span> (rs4.next()) &#123;</div><div class="line">	String name = rs4.getString(<span class="string">"name"</span>);</div><div class="line">	<span class="keyword">int</span> age = rs4.getInt(<span class="string">"age"</span>);</div><div class="line">	System.out.println(<span class="string">"Name: "</span> + name + <span class="string">", "</span> + <span class="string">"Age: "</span> + age);</div><div class="line">&#125;</div><div class="line">rs4.close();</div></pre></td></tr></table></figure></p>
<h3 id="Example-5：JDBC-下的事务"><a href="#Example-5：JDBC-下的事务" class="headerlink" title="Example 5：JDBC 下的事务"></a>Example 5：JDBC 下的事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///////// Example 5: 事务与回滚 transaction and rollback</span></div><div class="line"><span class="keyword">boolean</span> autoCommitDefault = <span class="keyword">false</span>;</div><div class="line">Savepoint savepoint1 = <span class="keyword">null</span>;</div><div class="line">Savepoint savepoint2 = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	Class.forName(JDBC_DRIVER);</div><div class="line">	conn = DriverManager.getConnection(DB_URL, USER, PASS);</div><div class="line"></div><div class="line">	autoCommitDefault = conn.getAutoCommit();</div><div class="line">	<span class="comment">// 关闭自动提交，数据库默认时，是自动提交的</span></div><div class="line">	conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">	stmt = conn.createStatement();</div><div class="line"></div><div class="line">	String sql5 = <span class="string">"SELECT * FROM `user` WHERE age=10"</span>;</div><div class="line">	String sql6 = <span class="string">"INSERT INTO `user`(name, age) VALUES ('name1',1),('name2', 2)"</span>;</div><div class="line">	String sql7 = <span class="string">"UPDATE `user` SET `name`='newname' WHERE age=10"</span>;</div><div class="line">	stmt.executeQuery(sql5);</div><div class="line">	savepoint1 = conn.setSavepoint(<span class="string">"Savepoint1"</span>);</div><div class="line">	stmt.executeUpdate(sql6);</div><div class="line">	savepoint2 = conn.setSavepoint(<span class="string">"Savepoint2"</span>);</div><div class="line">	stmt.executeUpdate(sql7);</div><div class="line">	conn.commit();</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 回滚, 至 savepoint2. savepoint 非必须</span></div><div class="line">		conn.rollback(savepoint2);</div><div class="line">	&#125; <span class="keyword">catch</span> (Throwable ignore) &#123;&#125;</div><div class="line">	<span class="keyword">throw</span> e;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 将 commit 设回默认值</span></div><div class="line">		conn.setAutoCommit(autoCommitDefault);</div><div class="line">	&#125; <span class="keyword">catch</span> (Throwable ignore) &#123;&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">if</span> (stmt != <span class="keyword">null</span>)</div><div class="line">			stmt.close();</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException se2) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (conn != <span class="keyword">null</span>)</div><div class="line">				conn.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException se) &#123;</div><div class="line">			se.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Example-6：JDBC-下的存储过程"><a href="#Example-6：JDBC-下的存储过程" class="headerlink" title="Example 6：JDBC 下的存储过程"></a>Example 6：JDBC 下的存储过程</h3><p><strong> TODO </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 有IN 类型的参数输入 和Out类型的参数输出	</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOutTest</span><span class="params">()</span></span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	Statement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		</div><div class="line">		Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>).newInstance();</div><div class="line">		</div><div class="line">		Driver driver = DriverManager.getDriver(URL);</div><div class="line">		Properties props = <span class="keyword">new</span> Properties();</div><div class="line">		props.put(<span class="string">"user"</span>, USER_NAME);</div><div class="line">		props.put(<span class="string">"password"</span>, PASSWORD);</div><div class="line">		</div><div class="line">		connection = driver.connect(URL, props);</div><div class="line">		</div><div class="line">		<span class="comment">//获得Statement对象,这里使用了事务机制，如果创建存储过程语句失败或者是执行compile失败，回退</span></div><div class="line">		connection.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">		statement = connection.createStatement();</div><div class="line">		String procedureString = <span class="string">"CREATE OR REPLACE PROCEDURE get_job_min_salary_proc("</span></div><div class="line">									+<span class="string">"input_job_id IN VARCHAR2,"</span></div><div class="line">									+<span class="string">"output_salary OUT number) AS "</span></div><div class="line">									+<span class="string">"BEGIN "</span></div><div class="line">									+<span class="string">"SELECT min_salary INTO output_salary FROM jobs WHERE job_id = input_job_id; "</span></div><div class="line">									+<span class="string">"END   get_job_min_salary_proc;"</span>;</div><div class="line">		<span class="comment">//1 创建存储过程,JDBC 数据库会编译存储过程</span></div><div class="line">		statement.execute(procedureString);</div><div class="line">		<span class="comment">//成功则提交</span></div><div class="line">		connection.commit();</div><div class="line">		<span class="comment">//2.创建callableStatement</span></div><div class="line">	    CallableStatement callableStatement = connection.prepareCall(<span class="string">"CALL get_job_min_salary_proc(?,?)"</span>);</div><div class="line">	    <span class="comment">//3，设置in参数</span></div><div class="line">	    callableStatement.setString(<span class="number">1</span>, <span class="string">"AD_PRES"</span>);</div><div class="line">	    <span class="comment">//4.注册输出参数</span></div><div class="line">	    callableStatement.registerOutParameter(<span class="number">2</span>, Types.NUMERIC);</div><div class="line">	    <span class="comment">//5.执行语句</span></div><div class="line">	    callableStatement.execute();</div><div class="line">	    </div><div class="line">	    BigDecimal salary = callableStatement.getBigDecimal(<span class="number">2</span>);</div><div class="line">	    System.out.println(salary);</div><div class="line">		</div><div class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">		System.out.println(<span class="string">"加载Oracle类失败！"</span>);</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection.rollback();</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		    <span class="comment">//使用完成后管理链接，释放资源，释放顺序应该是： ResultSet -&gt;Statement -&gt;Connection</span></div><div class="line">			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				statement.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				connection.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍-JDBC&quot;&gt;&lt;a href=&quot;#介绍-JDBC&quot; class=&quot;headerlink&quot; title=&quot;介绍 JDBC&quot;&gt;&lt;/a&gt;介绍 JDBC&lt;/h1&gt;&lt;p&gt;JDBC  是 Java 数据库连接（Java Database Connectivity）的简称，
    
    </summary>
    
    
      <category term="Spring" scheme="http://wenchao.wang/tags/Spring/"/>
    
      <category term="JDBC" scheme="http://wenchao.wang/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Spring 与 MyBatis 的集成详解</title>
    <link href="http://wenchao.wang/2016/10/Spring-%E4%B8%8E-MyBatis-%E7%9A%84%E9%9B%86%E6%88%90%E8%AF%A6%E8%A7%A3/"/>
    <id>http://wenchao.wang/2016/10/Spring-与-MyBatis-的集成详解/</id>
    <published>2016-10-13T17:32:09.000Z</published>
    <updated>2016-10-18T07:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>
<p>—— 摘自 <a href="http://www.mybatis.org/mybatis-3/zh/" target="_blank" rel="external">MyBatis 中文官网</a></p>
</blockquote>
<h1 id="Spring-与-MyBatis-的集成"><a href="#Spring-与-MyBatis-的集成" class="headerlink" title="Spring 与 MyBatis 的集成"></a>Spring 与 MyBatis 的集成</h1><p>MyBatis  与 Spring  的集成思路，总共有以下几个步骤：</p>
<ol>
<li>引入 MyBatis  与 Spring  框架相关的包，数据库驱动的包，可引入数据库连接池、日志、测试相关包</li>
<li>配置XML，包括数据源 DataSource （用于指定数据库连接地址、账号、密码等数据库配置）和 SqlSessionFactory  （用于指定 MyBatis 自动载入的 *Mapper.xml）</li>
<li>编写 Entity 类，用来存储数据库查询返回数据，一般而言，成员变量对应数据库表字段名，仅提供 getter/setter  方法</li>
<li>编写 Mapper 接口 与 *Mapper.xml ，Mapper 接口 指定操作名，并规定好传入参数，*Mapper.xml  为数据库操作的 SQL ，id  需要与 Mapper 接口 一致</li>
<li>创建数据库，编写服务，测试</li>
</ol>
<h2 id="从-Maven-引入-jar-包"><a href="#从-Maven-引入-jar-包" class="headerlink" title="从 Maven 引入 jar 包"></a>从 Maven 引入 jar 包</h2><p>在 Maven  项目中的 pom.xml  文件增加以下依赖。项目一般还需要增加 log 日志模块、junit 测试模块等，在此 pom.xml  不再赘述。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Maven Lib --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Spring --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Spring AOP --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spri</div><div class="line">    <span class="comment">&lt;!-- Servlet --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 连接池 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--  mysql driver --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建数据库环境"><a href="#创建数据库环境" class="headerlink" title="创建数据库环境"></a>创建数据库环境</h2><p>因为 MyBatis  框架是解决持久化或者说数据库的问题，因此我们需要配置一下数据库环境。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</div><div class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">	<span class="string">`age`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">	<span class="string">`gender`</span> <span class="built_in">INT</span>(<span class="number">2</span>),</div><div class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h2 id="配置-sqlSessionFactory-与-DataSource"><a href="#配置-sqlSessionFactory-与-DataSource" class="headerlink" title="配置 sqlSessionFactory 与 DataSource"></a>配置 sqlSessionFactory 与 DataSource</h2><p>要使用 MyBatis ，至少需要一个 SqlSessionFactoryBean  是用于创建 SqlSessionFactory  的。要配置这个 Factory bean ，放置下面的代码在 Spring 的 XML 配置文件中。我在配置时，将数据库相关的配置都创建了一个独立的 XML 配置文件，然后在 Spring 主配置文件中通过 import 引用。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- mysql data source --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverclass&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"6000"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- SqlSessionFactory --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Mapper文件存放的位置，当Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:sqlmap/*.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DAO Mapper --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"annotationClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.stereotype.Repository"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 扫描器开始扫描的基础包名，支持嵌套扫描 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.test.dao.mapper"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上是 my-db.xml  配置文件，主要分为三部分:</p>
<ol>
<li>datasource ，数据源，与数据库连接相关，配置数据库的地址、账户、密码，一些配置等等，从 jdbc.properties 文件中载入。关于 Spring 如何载入 properties 文件如何实现，不在这篇文章赘述了。</li>
<li>sqlSessionFactory ，数据库会话工厂。从 *Mapper.xml  中文件自动载入 <mapper></mapper></li>
<li>Mapper 类 ，在此配置中采用 Scanner 方式，自动从 mapper 包内载入 mapper 类。</li>
</ol>
<h2 id="调用-MyBatis-框架"><a href="#调用-MyBatis-框架" class="headerlink" title="调用 MyBatis 框架"></a>调用 MyBatis 框架</h2><h3 id="创建-Entity，映射-Database-表（或有）"><a href="#创建-Entity，映射-Database-表（或有）" class="headerlink" title="创建 Entity，映射 Database 表（或有）"></a>创建 Entity，映射 Database 表（或有）</h3><p>在 entity 包中创建实体，对应 t_user 表 的返回。成员变量一般与数据库表字段名一一对应，成员方法仅提供 getter/setter  方法。</p>
<p>实体类不是必须的，MyBatis  提供将数据库返回简单的映射到 Map 或 HashMap 结构中，而非 POJO 中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * t_user 表实体</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gender;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> gender; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">int</span> gender)</span> </span>&#123; <span class="keyword">this</span>.gender = gender; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建-DAO-Mapper"><a href="#创建-DAO-Mapper" class="headerlink" title="创建 DAO/Mapper"></a>创建 DAO/Mapper</h3><p>在 dao.mapper 包内创建 UserMapper 接口 ，并添加 @Repository  注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应具体数据库的方法，例如插入用户、通过 id 查找用户。每次需要定义一个数据库操作，就在 Mapper 类中定义一个<strong>接口</strong>。</p>
<blockquote>
<p>注意，因为在三、配置 sqlSessionFactory 与 DataSource ，定义了自动载入 Mapper 类 。因此，需要加入了 @Repository  的注解，用于标注数据访问组件，即DAO 组件。否则不需要 @Repository  注解，但需要在 *Mapper.xml  中增加 <mapper>  配置。</mapper></p>
</blockquote>
<h3 id="配置-Mapper-xml"><a href="#配置-Mapper-xml" class="headerlink" title="配置 Mapper.xml"></a>配置 Mapper.xml</h3><p>在 Mapper.xml  中编写具体的数据库操作的 SQL。</p>
<p>其中，tag 有 insert, select, update  等</p>
<p>id 与 Mapper 接口方法名一一对应；</p>
<p>parameterType  为传入参数，可以是 POJO，也可以是 int、String 这种基本类型，SQL 中的参数用 #{id}  的形式表示；</p>
<p>resultType  或者 resultMap ，都是存储返回的结果集，其中 resultMap  比较强大，灵活；resultType  可以简单指定为 map 或者 POJO。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.test.dao.mapper.UserMapper"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置一个resultMap 指定返回的类型 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userInfo"</span> <span class="attr">type</span>=<span class="string">"com.test.entity.User"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserInfos"</span> <span class="attr">resultMap</span>=<span class="string">"userInfo"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">        SELECT * FROM t_user WHERE age = #&#123;age&#125; ORDER BY id DESC;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUserInfo"</span> <span class="attr">parameterType</span>=<span class="string">"com.test.entity.User"</span>&gt;</span></div><div class="line">        INSERT INTO t_user(name, age, gender) VALUES (#&#123;userName&#125;,#&#123;age&#125;,#&#123;gender&#125;)</div><div class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            SELECT LAST_INSERT_ID();</div><div class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>关于 *Mapper.xml文件的配置，详情参考<a href="http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html" target="_blank" rel="external">官方文档</a></p>
</blockquote>
<h3 id="通过服务调用"><a href="#通过服务调用" class="headerlink" title="通过服务调用"></a>通过服务调用</h3><p>已经完成上述配置和接口等编写后，就可以在服务中调用了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(value = <span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        List x =  userMapper.findUserById(id);</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userMapper.insertUser(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在系统设计时，不会让服务直接就去调用如此底层的操作，往往会增加一个 model 层或者 controller 层。调用方法还是一致的，都是先注入 Mapper 接口，然后调用接口方法就可以了。</p>
<p>#参考资料</p>
<ol>
<li>MyBatis 与 Spring 集成，官网 <a href="http://www.mybatis.org/spring/zh/getting-started.html" target="_blank" rel="external">http://www.mybatis.org/spring/zh/getting-started.html</a></li>
<li>MyBatis 官网，配置和使用介绍，<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="external">http://www.mybatis.org/mybatis-3/zh/configuration.html</a></li>
<li>SSM框架——详细整合教程（Spring+SpringMVC+MyBatis），作者 shu_lin，<a href="http://blog.csdn.net/zhshulin/article/details/37956105" target="_blank" rel="external">http://blog.csdn.net/zhshulin/article/details/37956105</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 J
    
    </summary>
    
    
      <category term="Spring" scheme="http://wenchao.wang/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>简介Ubuntu下Apache服务器的安装</title>
    <link href="http://wenchao.wang/2015/10/%E7%AE%80%E4%BB%8BUbuntu%E4%B8%8BApache%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://wenchao.wang/2015/10/简介Ubuntu下Apache服务器的安装/</id>
    <published>2015-10-16T13:35:17.000Z</published>
    <updated>2016-10-18T07:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>本日志主要记录Apache 在Ubuntu 下的安装</p>
<h2 id="方法一：Apt安装"><a href="#方法一：Apt安装" class="headerlink" title="方法一：Apt安装"></a>方法一：Apt安装</h2><p>apt-get<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure></p>
<p>完成后，通过修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/apache2/apache2.conf</div></pre></td></tr></table></figure></p>
<p>来完成配置</p>
<h2 id="方法二：使用Apache源代码编译安装"><a href="#方法二：使用Apache源代码编译安装" class="headerlink" title="方法二：使用Apache源代码编译安装"></a>方法二：使用Apache源代码编译安装</h2><h3 id="下载Apache-的源代码"><a href="#下载Apache-的源代码" class="headerlink" title="下载Apache 的源代码"></a>下载Apache 的源代码</h3><p>从Apache 官网或其他可用源处下载Apache 的源代码</p>
<blockquote>
<p><a href="http://httpd.apache.org/download.cgi" target="_blank" rel="external">http://httpd.apache.org/download.cgi</a><br><a href="http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz" target="_blank" rel="external">http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz</a></p>
</blockquote>
<p>此链接为Apache 项目的官网，可获得Apache 服务器的多种版本，包括稳定版和 Beta 版等。此次选择下载了<code>httpd-2.4.3.tar.gz</code> 文件。</p>
<h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><p>下载完毕后得到<code>httpd-2.4.3.tar.gz</code> 文件，下一步需要对其进行解压。Linux 解压命令功能较为强大，可以直接选择解压至安装路径也可以先解压至指定路径，之后再复制到安装路径。<br>直接安装, 输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf httpd-2.4.3.tar.gz -C /usr/local/    //将Apache源文件解压至/usr/local/目录下</div></pre></td></tr></table></figure></p>
<p>Tar为归档文件压缩和解压指令</p>
<blockquote>
<p>-z 是配合解压.GZ的<br>-x 解开一个包文件<br>-v 显示详细信息<br>-f 必须，表示使用归档文件</p>
</blockquote>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">…</div><div class="line">httpd-2.4.3/docs/manual/howto/htaccess.html.ja.utf8</div><div class="line">httpd-2.4.3/docs/manual/howto/htaccess.html.ko.euc-kr</div><div class="line">httpd-2.4.3/docs/manual/howto/htaccess.html.pt-br</div><div class="line">httpd-2.4.3/docs/manual/howto/index.html</div><div class="line">……</div><div class="line">httpd-2.4.3/docs/manual/howto/ssi.html.en</div><div class="line">httpd-2.4.3/docs/manual/howto/ssi.html.fr</div><div class="line">httpd-2.4.3/docs/manual/howto/ssi.html.ja.utf8</div><div class="line">httpd-2.4.3/docs/manual/howto/ssi.html.ko.euc-kr</div><div class="line">httpd-2.4.3/docs/manual/faq/index.html</div><div class="line">…</div></pre></td></tr></table></figure></p>
<p>切换至<code>/usr/local/httpd-2.4.3</code> 目录下查看。<br>输入指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/httpd-2.4.3</div><div class="line">ls</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">wang@Wang-Satellite-M300:/usr/local/httpd-2.4.3$ ls -l</div><div class="line">total 1568</div><div class="line">-rw-r--r-- 1 501 staff 13507 Mar 29 2011 ABOUT_APACHE</div><div class="line">-rw-r--r-- 1 501 staff 22850 Jul 23 23:20 acinclude.m4</div><div class="line">-rw-r--r-- 1 501 staff 63038 Jan 31 2012 Apache-apr2.dsw</div><div class="line">-rw-r--r-- 1 501 staff 77169 Nov 19 2011 Apache.dsw</div><div class="line">-rw-r--r-- 1 501 staff 9907 Dec 18 2009 apache_probes.d</div><div class="line">-rw-r--r-- 1 501 staff 2512 Dec 22 2008 ap.d</div><div class="line">drwxr-xr-x 6 501 staff 4096 Nov 22 20:56 build</div><div class="line">-rw-r--r-- 1 501 staff 2644 Aug 24 2007 BuildAll.dsp</div><div class="line">-rw-r--r-- 1 501 staff 2724 Nov 12 2011 BuildBin.dsp</div><div class="line">-rwxr-xr-x 1 501 staff 6791 Jan 17 2011 buildconf</div><div class="line">-rw-r--r-- 1 501 staff 118884 Aug 18 01:05 CHANGES</div><div class="line">-rw-r--r-- 1 501 staff 12567 Apr 17 2012 config.layout</div><div class="line">-rwxr-xr-x 1 501 staff 956655 Aug 18 01:20 configure</div><div class="line">-rw-r--r-- 1 501 staff 27680 Jul 23 23:20 configure.in</div><div class="line">drwxr-xr-x 9 501 staff 4096 Nov 22 20:56 docs</div><div class="line">-rw-r--r-- 1 501 staff 403 Nov 22 2004 emacs-style</div><div class="line">-rw-r--r-- 1 501 staff 4124 Jun 12 2008 httpd.dsp</div><div class="line">-rw-r--r-- 1 501 staff 17556 Aug 18 01:20 httpd.spec</div><div class="line">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 include</div><div class="line">-rw-r--r-- 1 501 staff 5083 Aug 16 20:42 INSTALL</div><div class="line">-rw-r--r-- 1 501 staff 2909 Nov 15 2011 InstallBin.dsp</div><div class="line">-rw-r--r-- 1 501 staff 4142 Dec 16 2010 LAYOUT</div><div class="line">-rw-r--r-- 1 501 staff 20486 Jan 31 2012 libhttpd.dsp</div><div class="line">-rw-r--r-- 1 501 staff 25852 Jul 24 2011 LICENSE</div><div class="line">-rw-r--r-- 1 501 staff 9532 Jan 23 2012 Makefile.in</div><div class="line">-rw-r--r-- 1 501 staff 46658 Apr 21 2012 Makefile.win</div><div class="line">drwxr-xr-x 26 501 staff 4096 Nov 22 20:56 modules</div><div class="line">-rw-r--r-- 1 501 staff 550 Jul 19 14:48 NOTICE</div><div class="line">-rw-r--r-- 1 501 staff 13681 Mar 16 2012 NWGNUmakefile</div><div class="line">drwxr-xr-x 7 501 staff 4096 Nov 22 20:56 os</div><div class="line">-rw-r--r-- 1 501 staff 5158 Feb 20 2012 README</div><div class="line">-rw-r--r-- 1 501 staff 5572 Apr 23 2010 README.platforms</div><div class="line">-rw-r--r-- 1 501 staff 10184 Oct 31 2010 ROADMAP</div><div class="line">drwxr-xr-x 3 501 staff 4096 Nov 22 20:56 server</div><div class="line">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 srclib</div><div class="line">drwxr-xr-x 4 501 staff 4096 Nov 22 20:56 support</div><div class="line">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 test</div><div class="line">-rw-r--r-- 1 501 staff 8183 Mar 1 2007 VERSIONING</div></pre></td></tr></table></figure></p>
<p>在开始编译 Apache 源文件时需要配置一下，主要是设定编译好的文件的路径。<br>但是，在第一次配置中出现了错误，系统提示需要 <code>apr</code> 和 <code>apr-util</code> 两部分，因此，先配置安装这两个部分。</p>
<h3 id="安装-apr-和-apr-util-并配置"><a href="#安装-apr-和-apr-util-并配置" class="headerlink" title="安装 apr 和 apr-util 并配置"></a>安装 apr 和 apr-util 并配置</h3><p><strong>从Apache 官网下载apr 和apr-util 两个文件</strong><br>以下为官网推荐的镜像下载地址， </p>
<blockquote>
<p>apr <a href="http://mirror.bjtu.edu.cn/apache//apr/apr-1.4.6.tar.gz" target="_blank" rel="external">下载地址</a><br>apr-util <a href="http://mirror.bjtu.edu.cn/apache//apr/apr-util-1.5.1.tar.gz" target="_blank" rel="external">下载地址</a></p>
</blockquote>
<p>输入指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf apr-1.4.6.tar.gz -C /usr/local/</div><div class="line">sudo tar zxvf apr-util-1.5.1.tar.gz -C /usr/local/</div></pre></td></tr></table></figure></p>
<p><strong>配置 <code>apr</code> 和 <code>apr-util</code> 两个文件</strong><br>首先进入到 <code>apr</code> 解压后的目录下，用<code>cd</code>命令。<br>输入指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure –prefix=/usr/local/apr    //意思是将编译后的apr文件的顶层路径设为/usr/local/apr</div></pre></td></tr></table></figure></p>
<p>然后开始编译<code>apr</code>，编译过程同其他编译。<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>然后是<code>apr-util</code>的配置和编译。<br><code>apr-util</code> 的配置和 <code>apr</code> 配置大同小异，但由于其对 <code>apr</code> 有依赖，因此需要比 <code>apr</code> 多了一项配置要求。<br>首先进入 <code>apr-util</code> 解压至的目录下<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr-1.4.6 &gt; ~/apr-util.txt</div></pre></td></tr></table></figure></p>
<p>然后开始编译<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p><em>注意：有时有的系统还需要 <code>pcre</code>，<a href="http://pcre.org/" target="_blank" rel="external">下载地址</a></em><br>下载后的编译和安装都差不多，不再赘述。这里我直接用 <code>apt</code> 安装了 <code>pcre</code><br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libpcre3-dev</div></pre></td></tr></table></figure></p>
<h3 id="配置apache"><a href="#配置apache" class="headerlink" title="配置apache"></a>配置apache</h3><p>进入到解压后的 <code>httpd-2.4.3</code> 目录下。配置<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./configure --prefix=/usr/local/apache2 --with-apr=/usr/local/apr-1.4.6 --with-apr-util=/usr/local/apr-util-1.5.1 --enable-so &gt; ~/apache2.txt</div></pre></td></tr></table></figure></p>
<p>这里是最基本的 Apache 配置，除此之外还可以配置模块和其他细节。Apache 在该配置下默认为最小安装。更多 configure ，可以参考 <a href="http://apache.jz123.cn/programs/configure.html" target="_blank" rel="external">http://apache.jz123.cn/programs/configure.html</a><br>然后是 <code>make</code> 和 <code>make install</code>。安装完毕。<br>进入到 bin 目录，执行<code>./apachectl start</code>，如果一切安装顺利，可以看到：<strong>It works</strong>。<br>对于原来的<code>apr-1.4.6</code>，<code>apr-util-1.5.1</code> 和<code>httpd-xx</code> 等文件夹可以视需要来决定是否删去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本日志主要记录Apache 在Ubuntu 下的安装&lt;/p&gt;
&lt;h2 id=&quot;方法一：Apt安装&quot;&gt;&lt;a href=&quot;#方法一：Apt安装&quot; class=&quot;headerlink&quot; title=&quot;方法一：Apt安装&quot;&gt;&lt;/a&gt;方法一：Apt安装&lt;/h2&gt;&lt;p&gt;apt-get&lt;
    
    </summary>
    
    
      <category term="Apache" scheme="http://wenchao.wang/tags/Apache/"/>
    
  </entry>
  
</feed>
